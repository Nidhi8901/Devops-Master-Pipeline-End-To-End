- name: For K8s Master Node Configuration Only
  hosts: k8s-master
  become: true
  tasks:
    - name: Check if Kubernetes is already initialized
      command: kubectl cluster-info
      register: kubectl_status
      ignore_errors: yes

    - name: Define the Master Node Private IP on the shell
      shell:
        cmd: MASTER_PRIVATE_IP=$(ip addr show eth0 | awk '/inet / {print $2}' | cut -d/ -f1)
      when: kubectl_status.failed

    - name: Define the POD_CIDR variable in the shell
      shell:
        cmd: POD_CIDR="192.168.0.0/16"
      when: kubectl_status.failed

    - name: Define the Master Node name in short
      shell:
        cmd: NODENAME=$(hostname -s)
      when: kubectl_status.failed

    - name: Initialize the Kubernetes Cluster
      shell:
        cmd: kubeadm init --apiserver-advertise-address="$MASTER_PRIVATE_IP" --apiserver-cert-extra-sans="$MASTER_PRIVATE_IP" --pod-network-cidr="$POD_CIDR" --node-name="$NODENAME" --ignore-preflight-errors Swap
      register: kubeinit_details
      when: kubectl_status.failed

    - name: Output of the Kubeadm init command
      debug:
        var: kubeinit_details
      when: kubectl_status.failed

    - name: Create .kube directory if it doesn't exist
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
      when: kubectl_status.failed

    - name: Copy admin.conf to user's .kube directory
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: yes
        mode: '0644'
      when: kubectl_status.failed

    - name: Change ownership of .kube/config to the user
      file:
        path: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
      when: kubectl_status.failed

    - name: Configure the CNI using Calico
      shell:
        cmd: kubectl apply -f https://raw.githubusercontent.com/sudhanshuvlog/kubernetes-multinode-cluster-ansible-aws/main/calico.yaml
      when: kubectl_status.failed

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command
      when: kubectl_status.failed

    - name: Copy join command to local file
      local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
      when: kubectl_status.failed

- name: In the worker Node
  hosts: k8s-workers
  become: true
  tasks:
    - name: Check if the node is already part of the cluster
      command: kubectl get nodes --no-headers
      register: nodes_list
      failed_when: false

    - name: Check if the node's hostname is already in the cluster
      set_fact:
        node_in_cluster: "{{ ansible_hostname in nodes_list.stdout }}"
    
    - name: Copy the join command to server location
      copy:
        src: join-command
        dest: /tmp/join-command.sh
        mode: '0777'
      when: not node_in_cluster

    - name: Join the node to cluster
      command: sh /tmp/join-command.sh
      when: not node_in_cluster
